matrix_train <- unnest(matrix_train)
matrix_train <- data.matrix(matrix_train)
matrix_test <- test_wide_all[,-1]
matrix_test <- unnest(matrix_test)
matrix_test <- data.matrix(matrix_test)
test_hour <- filter(test, Hour==1)
model <- cv.glmnet(x=matrix_train, y=as.numeric(matrix_train[,2]))
predict_model<- predict(model, newx=matrix_test)
lasso_mape1 <- mape(predict_model, test_hour$Consumption)
print(lasso_mape1)
train_wide_cons <- train[,2:4 ] %>% pivot_wider(names_from = Hour, values_from = Consumption, names_prefix = "consumption_")
train_wide_cons <- train_wide_cons[-1:-7,]  # first 7 days are removed due to no value for lag168. (we will merge lag48 and lag168 datas)
test_wide_cons <- test_wide_cons[,2:4 ] %>% pivot_wider(names_from = Hour, values_from = Consumption, names_prefix = "consumption_")
train_wide_cons <- train[,2:4 ] %>% pivot_wider(names_from = Hour, values_from = Consumption, names_prefix = "consumption_")
train_wide_cons <- train_wide_cons[-1:-7,]  # first 7 days are removed due to no value for lag168. (we will merge lag48 and lag168 datas)
test_wide_cons <- test[,2:4 ] %>% pivot_wider(names_from = Hour, values_from = Consumption, names_prefix = "consumption_")
View(test_wide_cons)
test_hour <- filter(test, Hour==0)
model <- cv.glmnet(x=matrix_train, y=train_wide_cons[,2])
matrix_train_cons <- train_wide_cons[,-1]
matrix_train_cons <- unnest(matrix_train_cons)
matrix_train_cons <- data.matrix(matrix_train_cons)
matrix_test_cons <- test_wide_cons[,-1]
matrix_test_cons <- unnest(matrix_test_cons)
matrix_test_cons <- data.matrix(matrix_test_cons)
test_hour <- filter(test, Hour==0)
model <- cv.glmnet(x=matrix_train, y=matrix_test_cons[,1])
View(matrix_test_cons)
knitr::opts_chunk$set(echo = TRUE)
#loading libraries
library(ggplot2)
library(dplyr)
library(tidyverse)
library(data.table)
library(scatterplot3d)
library(Metrics)
library(glmnet)
#reading dataframes
base_data = read.csv("https://raw.githubusercontent.com/BU-IE-582/fall20-buraksimsekkk/master/HW3/RealTimeConsumption-01012016-30112020.csv")
data <- base_data
data$Date        = as.Date(data$Date, "%d.%m.%Y")
data$Hour        = as.numeric(sub(":00","", data$Hour))
data$Consumption = as.numeric(sub(",","" , data$Consumption..MWh.))
data <- select(data,-Consumption..MWh.)
data <- data %>% mutate(index = c(1:nrow(data)),Date )
data <- data[,c(4,1,2,3)]
data <- data[-2233:-2256,]
data <- data[-2113:-2136,]
data <- data[-2065:-2088,]
str(data)
data <- data %>% mutate(frcst_lag48  = lag(data$Consumption, 48, na.pad = TRUE),
frcst_lag168 = lag(data$Consumption, 168, na.pad = TRUE))
test  <- data %>% tail(30*24)
plot_ref <- test %>% tail(48)
print("Real and Predicted Consumpiton between 29.11.2020 and 30.11.2020")
print(ggplot(plot_ref) + geom_line(aes(x=index, y=Consumption)) + geom_line(aes(x=index, y=frcst_lag48), color = "red")  + xlab("Time 29.11.2020-30.11.2020") + ylab("Consumption"))
frcst_lag48_mape  <- mape(test$frcst_lag48, test$Consumption)
frcst_lag168_mape <- mape(test$frcst_lag168, test$Consumption)
train <- data %>% head(-30*24)
lrm <- lm(Consumption ~ frcst_lag48 + frcst_lag168, train)
summary(lrm)
lrm_prediction <- predict(lrm, newdata = test)
lrm_mape <- mape(lrm_prediction, test$Consumption)
print(lrm_mape)
for (i in 0:23) {
filtered_model <- filter(train, Hour==i)
test_model     <- filter(test, Hour==i)
Hourly_lrm            <- lm(Consumption ~ frcst_lag48 + frcst_lag168, filtered_model)
Hourly_lrm_prediction <- predict(Hourly_lrm, newdata = test_model)
Hourly_lrm_mape       <- mape(Hourly_lrm_prediction, test_model$Consumption)
#print("Model For Hour:" )
#print(i)
#print(summary(Hourly_lrm)) This line is commented since it is long text. However, it can be used if summary of all models are interested.
print(Hourly_lrm_mape)
#print("-----------------")
}
print((0.03348154 + 0.03349093 + 0.03472447 + 0.03266162 + 0.03248706 + 0.03249486 + 0.03252868 + 0.03908102 + 0.0475897 +  0.05499438 + 0.06020496 + 0.06150891 + 0.06406572 + 0.06517753 + 0.0634462 + 0.06045202 + 0.05190696 + 0.0475487 + 0.03838112 + 0.03504973 + 0.03218794 + 0.03204597 + 0.03219412 + 0.0345693)/24 )
train_wide48 <- train[ , -4]
train_wide48 <- train_wide48[,2:4 ] %>% pivot_wider(names_from = Hour, values_from = frcst_lag48, names_prefix = "lag48_")
train_wide48 <- train_wide48[-1:-7,]  # first 7 days are removed due to no value for lag168. (we will merge lag48 and lag168 datas)
test_wide48 <- test[ , -4]
test_wide48 <- test_wide48[,2:4 ] %>% pivot_wider(names_from = Hour, values_from = frcst_lag48, names_prefix = "lag48_")
train_wide168 <- train[ , -4:-5]
train_wide168 <- train_wide168[,2:4 ] %>% pivot_wider(names_from = Hour, values_from = frcst_lag168, names_prefix = "lag168_")
train_wide168 <- train_wide168[-1:-7,]   # first 7 days are removed due to no value for lag168. (we will merge lag48 and lag168 datas)
test_wide168 <- test[ , -4:-5]
test_wide168 <- test_wide168[,2:4 ] %>% pivot_wider(names_from = Hour, values_from = frcst_lag168, names_prefix = "lag168_")
train_wide_cons <- train[,2:4 ] %>% pivot_wider(names_from = Hour, values_from = Consumption, names_prefix = "consumption_")
train_wide_cons <- train_wide_cons[-1:-7,]  # first 7 days are removed due to no value for lag168. (we will merge lag48 and lag168 datas)
test_wide_cons <- test[,2:4 ] %>% pivot_wider(names_from = Hour, values_from = Consumption, names_prefix = "consumption_")
train_wide48_168 <- cbind(train_wide48, train_wide168[,-1])
test_wide48_168 <- cbind(test_wide48, test_wide168[,-1])
matrix_train <- train_wide48_168[,-1]
matrix_train <- unnest(matrix_train)
matrix_train <- data.matrix(matrix_train)
matrix_test <- test_wide48_168[,-1]
matrix_test <- unnest(matrix_test)
matrix_test <- data.matrix(matrix_test)
matrix_train_cons <- train_wide_cons[,-1]
matrix_train_cons <- unnest(matrix_train_cons)
matrix_train_cons <- data.matrix(matrix_train_cons)
matrix_test_cons <- test_wide_cons[,-1]
matrix_test_cons <- unnest(matrix_test_cons)
matrix_test_cons <- data.matrix(matrix_test_cons)
test_hour <- filter(test, Hour==0)
model <- cv.glmnet(x=matrix_train, y=matrix_test_cons[,1])
View(matrix_train)
test_hour <- filter(test, Hour==0)
model <- cv.glmnet(x=matrix_train, y=matrix_train_cons[,1])
predict_mode0 <- predict(model, newx=matrix_test)
lasso_mape0 <- mape(predict_model, test_hour$Consumption)
print(lasso_mape0)
View(test_hour)
View(matrix_train_cons)
for (i in 0:23) {
test_hour <- filter(test, Hour==i)
model <- cv.glmnet(x=matrix_train, y=matrix_train_cons[,i+1])
predict_model<- predict(model, newx=matrix_test)
lasso_mape[i] <- mape(predict_model, test_hour$Consumption)
print(lasso_mape[i])
}
mean(lasso_mape[0:2])
mean(lasso_mape[0:1])
mean(lasso_mape[0])
mean(lasso_mape[1])
mean(lasso_mape[24])
mean(lasso_mape[23])
mean(lasso_mape[0])
mean(lasso_mape[23])
mean(lasso_mape[22])
for (i in 0:23) {
test_hour <- filter(test, Hour==i)
model <- cv.glmnet(x=matrix_train, y=matrix_train_cons[,i+1])
predict_model<- predict(model, newx=matrix_test)
lasso_mape[i+1] <- mape(predict_model, test_hour$Consumption)
print(lasso_mape[i])
}
lasso_mape <- 0
for (i in 0:23) {
test_hour <- filter(test, Hour==i)
model <- cv.glmnet(x=matrix_train, y=matrix_train_cons[,i+1])
predict_model<- predict(model, newx=matrix_test)
lasso_mape[i+1] <- mape(predict_model, test_hour$Consumption)
print(lasso_mape[i])
}
test_hour <- filter(test, Hour==0)
model <- cv.glmnet(x=matrix_train, y=matrix_train_cons[,1])
predict_mode0 <- predict(model, newx=matrix_test)
lasso_mape0 <- mape(predict_model, test_hour$Consumption)
print(lasso_mape0)
for (i in 0:23) {
test_hour <- filter(test, Hour==i)
model <- cv.glmnet(x=matrix_train, y=matrix_train_cons[,i+1])
predict_model<- predict(model, newx=matrix_test)
lasso_mape[i+1] <- mape(predict_model, test_hour$Consumption)
print(lasso_mape[i+1])
}
knitr::opts_chunk$set(echo = TRUE)
#loading libraries
library(ggplot2)
library(dplyr)
library(tidyverse)
library(data.table)
library(scatterplot3d)
library(Metrics)
library(glmnet)
#reading dataframes
base_data = read.csv("https://raw.githubusercontent.com/BU-IE-582/fall20-buraksimsekkk/master/HW3/RealTimeConsumption-01012016-30112020.csv")
data <- base_data
data$Date        = as.Date(data$Date, "%d.%m.%Y")
data$Hour        = as.numeric(sub(":00","", data$Hour))
data$Consumption = as.numeric(sub(",","" , data$Consumption..MWh.))
data <- select(data,-Consumption..MWh.)
data <- data %>% mutate(index = c(1:nrow(data)),Date )
data <- data[,c(4,1,2,3)]
data <- data[-2233:-2256,]
data <- data[-2113:-2136,]
data <- data[-2065:-2088,]
str(data)
data <- data %>% mutate(frcst_lag48  = lag(data$Consumption, 48, na.pad = TRUE),
frcst_lag168 = lag(data$Consumption, 168, na.pad = TRUE))
test  <- data %>% tail(30*24)
plot_ref <- test %>% tail(48)
print("Real and Predicted Consumpiton between 29.11.2020 and 30.11.2020")
print(ggplot(plot_ref) + geom_line(aes(x=index, y=Consumption)) + geom_line(aes(x=index, y=frcst_lag48), color = "red")  + xlab("Time 29.11.2020-30.11.2020") + ylab("Consumption"))
frcst_lag48_mape  <- mape(test$frcst_lag48, test$Consumption)
frcst_lag168_mape <- mape(test$frcst_lag168, test$Consumption)
train <- data %>% head(-30*24)
lrm <- lm(Consumption ~ frcst_lag48 + frcst_lag168, train)
summary(lrm)
lrm_prediction <- predict(lrm, newdata = test)
lrm_mape <- mape(lrm_prediction, test$Consumption)
print(lrm_mape)
for (i in 0:23) {
filtered_model <- filter(train, Hour==i)
test_model     <- filter(test, Hour==i)
Hourly_lrm            <- lm(Consumption ~ frcst_lag48 + frcst_lag168, filtered_model)
Hourly_lrm_prediction <- predict(Hourly_lrm, newdata = test_model)
Hourly_lrm_mape       <- mape(Hourly_lrm_prediction, test_model$Consumption)
#print("Model For Hour:" )
#print(i)
#print(summary(Hourly_lrm)) This line is commented since it is long text. However, it can be used if summary of all models are interested.
print(Hourly_lrm_mape)
#print("-----------------")
}
print((0.03348154 + 0.03349093 + 0.03472447 + 0.03266162 + 0.03248706 + 0.03249486 + 0.03252868 + 0.03908102 + 0.0475897 +  0.05499438 + 0.06020496 + 0.06150891 + 0.06406572 + 0.06517753 + 0.0634462 + 0.06045202 + 0.05190696 + 0.0475487 + 0.03838112 + 0.03504973 + 0.03218794 + 0.03204597 + 0.03219412 + 0.0345693)/24 )
train_wide48 <- train[ , -4]
train_wide48 <- train_wide48[,2:4 ] %>% pivot_wider(names_from = Hour, values_from = frcst_lag48, names_prefix = "lag48_")
train_wide48 <- train_wide48[-1:-7,]  # first 7 days are removed due to no value for lag168. (we will merge lag48 and lag168 datas)
test_wide48 <- test[ , -4]
test_wide48 <- test_wide48[,2:4 ] %>% pivot_wider(names_from = Hour, values_from = frcst_lag48, names_prefix = "lag48_")
train_wide168 <- train[ , -4:-5]
train_wide168 <- train_wide168[,2:4 ] %>% pivot_wider(names_from = Hour, values_from = frcst_lag168, names_prefix = "lag168_")
train_wide168 <- train_wide168[-1:-7,]   # first 7 days are removed due to no value for lag168. (we will merge lag48 and lag168 datas)
test_wide168 <- test[ , -4:-5]
test_wide168 <- test_wide168[,2:4 ] %>% pivot_wider(names_from = Hour, values_from = frcst_lag168, names_prefix = "lag168_")
train_wide_cons <- train[,2:4 ] %>% pivot_wider(names_from = Hour, values_from = Consumption, names_prefix = "consumption_")
train_wide_cons <- train_wide_cons[-1:-7,]  # first 7 days are removed due to no value for lag168. (we will merge lag48 and lag168 datas)
test_wide_cons <- test[,2:4 ] %>% pivot_wider(names_from = Hour, values_from = Consumption, names_prefix = "consumption_")
train_wide48_168 <- cbind(train_wide48, train_wide168[,-1])
test_wide48_168 <- cbind(test_wide48, test_wide168[,-1])
matrix_train <- train_wide48_168[,-1]
matrix_train <- unnest(matrix_train)
matrix_train <- data.matrix(matrix_train)
matrix_test <- test_wide48_168[,-1]
matrix_test <- unnest(matrix_test)
matrix_test <- data.matrix(matrix_test)
matrix_train_cons <- train_wide_cons[,-1]
matrix_train_cons <- unnest(matrix_train_cons)
matrix_train_cons <- data.matrix(matrix_train_cons)
matrix_test_cons <- test_wide_cons[,-1]
matrix_test_cons <- unnest(matrix_test_cons)
matrix_test_cons <- data.matrix(matrix_test_cons)
lasso_mape <- 0 # give a zero value to prevent numeric error
for (i in 0:23) {
test_hour <- filter(test, Hour==i)
model <- cv.glmnet(x=matrix_train, y=matrix_train_cons[,i+1])
predict_model<- predict(model, newx=matrix_test)
lasso_mape[i+1] <- mape(predict_model, test_hour$Consumption)
print(lasso_mape[i+1])
}
#mean(lasso_mape[22])
mean(lasso_mape[1:2])
matrix_train <- train_wide48_168[,-1]
matrix_train <- unnest(matrix_train)
matrix_train <- data.matrix(matrix_train)
matrix_test <- test_wide48_168[,-1]
matrix_test <- unnest(matrix_test)
matrix_test <- data.matrix(matrix_test)
matrix_train_cons <- train_wide_cons[,-1]
matrix_train_cons <- unnest(matrix_train_cons)
matrix_train_cons <- data.matrix(matrix_train_cons)
matrix_test_cons <- test_wide_cons[,-1]
matrix_test_cons <- unnest(matrix_test_cons)
matrix_test_cons <- data.matrix(matrix_test_cons)
lasso_mape <- 0 # give a zero value to prevent numeric error
print("Lasso Performance from 0 to 23:")
for (i in 0:23) {
test_hour <- filter(test, Hour==i)
model <- cv.glmnet(x=matrix_train, y=matrix_train_cons[,i+1])
predict_model<- predict(model, newx=matrix_test)
lasso_mape[i+1] <- mape(predict_model, test_hour$Consumption)
print(lasso_mape[i+1])
}
print("Average Value of all hours")
print(mean(lasso_mape[1:24]))
Avg_lasso_mape <- mean(lasso_mape[1:24]
Avg_lasso_mape <- mean(lasso_mape[1:24])
avg_lasso_mape <- mean(lasso_mape[1:24])
boxplot(0.0776, 0.0365, 0.0426, Hourly_lrm_mape, avg_lasso_mape, ylab="MAPE Comparision", xlab="Methods", names=c("Lag48","Lag168","Linear Reg","Hourly Seasonality","Penalized Reg")
boxplot(0.0776, 0.0365, 0.0426, Hourly_lrm_mape, avg_lasso_mape, ylab="MAPE Comparision", xlab="Methods", names=c("Lag48","Lag168","Linear Reg","Hourly Seasonality","Penalized Reg"))
install.packages(tidyr)
install.packages("tidyr")
library(tidyr)
boxplot(0.0776, 0.0365, 0.0426, Hourly_lrm_mape, avg_lasso_mape, ylab="MAPE Comparision", xlab="Methods", names=c("Lag48","Lag168","Linear Reg","Hourly Seasonality","Penalized Reg"))
for (i in 0:23) {
filtered_model <- filter(train, Hour==i)
test_model     <- filter(test, Hour==i)
Hourly_lrm            <- lm(Consumption ~ frcst_lag48 + frcst_lag168, filtered_model)
Hourly_lrm_prediction <- predict(Hourly_lrm, newdata = test_model)
Hourly_lrm_mape[i]       <- mape(Hourly_lrm_prediction, test_model$Consumption)
#print("Model For Hour:" )
#print(i)
#print(summary(Hourly_lrm)) This line is commented since it is long text. However, it can be used if summary of all models are interested.
print(Hourly_lrm_mape)
#print("-----------------")
}
for (i in 0:23) {
filtered_model <- filter(train, Hour==i)
test_model     <- filter(test, Hour==i)
Hourly_lrm            <- lm(Consumption ~ frcst_lag48 + frcst_lag168, filtered_model)
Hourly_lrm_prediction <- predict(Hourly_lrm, newdata = test_model)
Hourly_lrm_mape[i]    <- mape(Hourly_lrm_prediction, test_model$Consumption)
#print("Model For Hour:" )
#print(i)
#print(summary(Hourly_lrm)) This line is commented since it is long text. However, it can be used if summary of all models are interested.
print(Hourly_lrm_mape[i])
#print("-----------------")
}
Hourly_lrm_mape <- 0 # give a zero value to prevent numeric error
for (i in 0:23) {
filtered_model <- filter(train, Hour==i)
test_model     <- filter(test, Hour==i)
Hourly_lrm     <- lm(Consumption ~ frcst_lag48 + frcst_lag168, filtered_model)
Hourly_lrm_prediction <- predict(Hourly_lrm, newdata = test_model)
Hourly_lrm_mape[i+1]    <- mape(Hourly_lrm_prediction, test_model$Consumption)
#print("Model For Hour:" )
#print(i)
#print(summary(Hourly_lrm)) This line is commented since it is long text. However, it can be used if summary of all models are interested.
print(Hourly_lrm_mape[i+1])
#print("-----------------")
}
avg_Hourly_lrm_mape <- mean(Hourly_lrm_mape[1:24])
avg_Hourly_lrm_mape <- mean(Hourly_lrm_mape[1:24])
avg_Hourly_lrm_mape <- mean(Hourly_lrm_mape[1:24])
print(avg_Hourly_lrm_mape)
boxplot(0.0776, 0.0365, 0.0426, Hourly_lrm_mape, lasso_mape, ylab="MAPE Comparision", xlab="Methods", names=c("Lag48","Lag168","Linear Reg","Hourly Seasonality","Penalized Reg"))
boxplot(0.0776, 0.0365, 0.0426, Hourly_lrm_mape, lasso_mape, ylab="MAPE Comparision", xlab="Methods", names=c("Lag48","Lag168","Linear Reg","Hourly Reg","Penalized Reg"))
```{r Comparasion, warning=FALSE ,message=FALSE}
boxplot(0.0776, 0.0365, 0.0426, Hourly_lrm_mape, lasso_mape, ylab="MAPE Comparision", xlab="Methods", names=c("Lag48","Lag168","Linear Reg.","Hourly Reg.","Penalized Reg."))
```
boxplot(0.0776, 0.0365, 0.0426, Hourly_lrm_mape, lasso_mape, ylab="MAPE Comparision", xlab="Methods", names=c("Lag48","Lag168","Linear Reg.","Hourly Reg.","Penalized Reg."))
boxplot(0.0776, 0.0365, 0.0426, Hourly_lrm_mape, lasso_mape, ylab="MAPE Comparision", xlab="Methods", names=c("Lag48","Lag168","Linear Reg","Hourly Reg","Penalized Reg"))
boxplot(0.0776, 0.0365, 0.0426, Hourly_lrm_mape, lasso_mape, ylab="MAPE Comparision", xlab="Methods", names=c("Naive Lag48","Naive Lag168","Linear Reg","Hourly Reg","Penalized Reg"))
knitr::opts_chunk$set(echo = TRUE)
#loading libraries
library(ggplot2)
library(dplyr)
library(tidyverse)
library(tidyr)
library(data.table)
library(scatterplot3d)
library(Metrics)
library(glmnet)
#reading dataframes
base_data = read.csv("https://raw.githubusercontent.com/BU-IE-582/fall20-buraksimsekkk/master/HW3/RealTimeConsumption-01012016-30112020.csv")
data <- base_data
data$Date        = as.Date(data$Date, "%d.%m.%Y")
data$Hour        = as.numeric(sub(":00","", data$Hour))
data$Consumption = as.numeric(sub(",","" , data$Consumption..MWh.))
data <- select(data,-Consumption..MWh.)
data <- data %>% mutate(index = c(1:nrow(data)),Date )
data <- data[,c(4,1,2,3)]
data <- data[-2233:-2256,]
data <- data[-2113:-2136,]
data <- data[-2065:-2088,]
str(data)
data <- data %>% mutate(frcst_lag48  = lag(data$Consumption, 48, na.pad = TRUE),
frcst_lag168 = lag(data$Consumption, 168, na.pad = TRUE))
test  <- data %>% tail(30*24)
plot_ref <- test %>% tail(48)
print("Real and Predicted Consumpiton between 29.11.2020 and 30.11.2020")
print(ggplot(plot_ref) + geom_line(aes(x=index, y=Consumption)) + geom_line(aes(x=index, y=frcst_lag48), color = "red")  + xlab("Time 29.11.2020-30.11.2020") + ylab("Consumption"))
frcst_lag48_mape  <- mape(test$frcst_lag48, test$Consumption)
frcst_lag168_mape <- mape(test$frcst_lag168, test$Consumption)
train <- data %>% head(-30*24)
lrm <- lm(Consumption ~ frcst_lag48 + frcst_lag168, train)
summary(lrm)
lrm_prediction <- predict(lrm, newdata = test)
lrm_mape <- mape(lrm_prediction, test$Consumption)
print(lrm_mape)
Hourly_lrm_mape <- 0 # give a zero value to prevent numeric error
for (i in 0:23) {
filtered_model <- filter(train, Hour==i)
test_model     <- filter(test, Hour==i)
Hourly_lrm     <- lm(Consumption ~ frcst_lag48 + frcst_lag168, filtered_model)
Hourly_lrm_prediction <- predict(Hourly_lrm, newdata = test_model)
Hourly_lrm_mape[i+1]    <- mape(Hourly_lrm_prediction, test_model$Consumption)
#print("Model For Hour:" )
#print(i)
#print(summary(Hourly_lrm)) This line is commented since it is long text. However, it can be used if summary of all models are interested.
print(Hourly_lrm_mape[i+1])
#print("-----------------")
}
avg_Hourly_lrm_mape <- mean(Hourly_lrm_mape[1:24])
print(avg_Hourly_lrm_mape)
train_wide48 <- train[ , -4]
train_wide48 <- train_wide48[,2:4 ] %>% pivot_wider(names_from = Hour, values_from = frcst_lag48, names_prefix = "lag48_")
train_wide48 <- train_wide48[-1:-7,]  # first 7 days are removed due to no value for lag168. (we will merge lag48 and lag168 datas)
test_wide48 <- test[ , -4]
test_wide48 <- test_wide48[,2:4 ] %>% pivot_wider(names_from = Hour, values_from = frcst_lag48, names_prefix = "lag48_")
train_wide168 <- train[ , -4:-5]
train_wide168 <- train_wide168[,2:4 ] %>% pivot_wider(names_from = Hour, values_from = frcst_lag168, names_prefix = "lag168_")
train_wide168 <- train_wide168[-1:-7,]   # first 7 days are removed due to no value for lag168. (we will merge lag48 and lag168 datas)
test_wide168 <- test[ , -4:-5]
test_wide168 <- test_wide168[,2:4 ] %>% pivot_wider(names_from = Hour, values_from = frcst_lag168, names_prefix = "lag168_")
train_wide_cons <- train[,2:4 ] %>% pivot_wider(names_from = Hour, values_from = Consumption, names_prefix = "consumption_")
train_wide_cons <- train_wide_cons[-1:-7,]  # first 7 days are removed due to no value for lag168. (we will merge lag48 and lag168 datas)
test_wide_cons <- test[,2:4 ] %>% pivot_wider(names_from = Hour, values_from = Consumption, names_prefix = "consumption_")
train_wide48_168 <- cbind(train_wide48, train_wide168[,-1])
test_wide48_168 <- cbind(test_wide48, test_wide168[,-1])
matrix_train <- train_wide48_168[,-1]
matrix_train <- unnest(matrix_train)
matrix_train <- data.matrix(matrix_train)
matrix_test <- test_wide48_168[,-1]
matrix_test <- unnest(matrix_test)
matrix_test <- data.matrix(matrix_test)
matrix_train_cons <- train_wide_cons[,-1]
matrix_train_cons <- unnest(matrix_train_cons)
matrix_train_cons <- data.matrix(matrix_train_cons)
matrix_test_cons <- test_wide_cons[,-1]
matrix_test_cons <- unnest(matrix_test_cons)
matrix_test_cons <- data.matrix(matrix_test_cons)
lasso_mape <- 0 # give a zero value to prevent numeric error
print("Lasso Performance from 0 to 23:")
for (i in 0:23) {
test_hour <- filter(test, Hour==i)
model <- cv.glmnet(x=matrix_train, y=matrix_train_cons[,i+1])
predict_model<- predict(model, newx=matrix_test)
lasso_mape[i+1] <- mape(predict_model, test_hour$Consumption)
print(lasso_mape[i+1])
}
avg_lasso_mape <- mean(lasso_mape[1:24])
print("----------------------------")
print("Average Value of all hours")
print(mean(lasso_mape[1:24]))
boxplot(0.0776, 0.0365, 0.0426, Hourly_lrm_mape, lasso_mape, ylab="MAPE Comparision", xlab="Methods", names=c("Naive Lag48","Naive Lag168","Linear Reg","Hourly Reg","Penalized Reg"))
knitr::opts_chunk$set(echo = TRUE)
#loading libraries
library(ggplot2)
library(dplyr)
library(tidyverse)
library(tidyr)
library(data.table)
library(scatterplot3d)
library(Metrics)
library(glmnet)
#reading dataframes
base_data = read.csv("https://raw.githubusercontent.com/BU-IE-582/fall20-buraksimsekkk/master/HW3/RealTimeConsumption-01012016-30112020.csv")
data <- base_data
data$Date        = as.Date(data$Date, "%d.%m.%Y")
data$Hour        = as.numeric(sub(":00","", data$Hour))
data$Consumption = as.numeric(sub(",","" , data$Consumption..MWh.))
data <- select(data,-Consumption..MWh.)
data <- data %>% mutate(index = c(1:nrow(data)),Date )
data <- data[,c(4,1,2,3)]
data <- data[-2233:-2256,]
data <- data[-2113:-2136,]
data <- data[-2065:-2088,]
str(data)
data <- data %>% mutate(frcst_lag48  = lag(data$Consumption, 48, na.pad = TRUE),
frcst_lag168 = lag(data$Consumption, 168, na.pad = TRUE))
test  <- data %>% tail(30*24)
plot_ref <- test %>% tail(48)
print("Real and Predicted Consumpiton between 29.11.2020 and 30.11.2020")
print(ggplot(plot_ref) + geom_line(aes(x=index, y=Consumption)) + geom_line(aes(x=index, y=frcst_lag48), color = "red")  + xlab("Time 29.11.2020-30.11.2020") + ylab("Consumption"))
frcst_lag48_mape  <- mape(test$frcst_lag48, test$Consumption)
frcst_lag168_mape <- mape(test$frcst_lag168, test$Consumption)
train <- data %>% head(-30*24)
lrm <- lm(Consumption ~ frcst_lag48 + frcst_lag168, train)
summary(lrm)
lrm_prediction <- predict(lrm, newdata = test)
lrm_mape <- mape(lrm_prediction, test$Consumption)
print(lrm_mape)
Hourly_lrm_mape <- 0 # give a zero value to prevent numeric error
print("Hourly Linear Regression Model Performance from 0 to 23:")
for (i in 0:23) {
filtered_model <- filter(train, Hour==i)
test_model     <- filter(test, Hour==i)
Hourly_lrm     <- lm(Consumption ~ frcst_lag48 + frcst_lag168, filtered_model)
Hourly_lrm_prediction <- predict(Hourly_lrm, newdata = test_model)
Hourly_lrm_mape[i+1]    <- mape(Hourly_lrm_prediction, test_model$Consumption)
#print("Model For Hour:" )
#print(i)
#print(summary(Hourly_lrm)) This line is commented since it is long text. However, it can be used if summary of all models are interested.
print(Hourly_lrm_mape[i+1])
}
print("-----------------")
print("Average Hourly Linear Regression Model MAPE:")
avg_Hourly_lrm_mape <- mean(Hourly_lrm_mape[1:24])
print(avg_Hourly_lrm_mape)
train_wide48 <- train[ , -4]
train_wide48 <- train_wide48[,2:4 ] %>% pivot_wider(names_from = Hour, values_from = frcst_lag48, names_prefix = "lag48_")
train_wide48 <- train_wide48[-1:-7,]  # first 7 days are removed due to no value for lag168. (we will merge lag48 and lag168 datas)
test_wide48 <- test[ , -4]
test_wide48 <- test_wide48[,2:4 ] %>% pivot_wider(names_from = Hour, values_from = frcst_lag48, names_prefix = "lag48_")
train_wide168 <- train[ , -4:-5]
train_wide168 <- train_wide168[,2:4 ] %>% pivot_wider(names_from = Hour, values_from = frcst_lag168, names_prefix = "lag168_")
train_wide168 <- train_wide168[-1:-7,]   # first 7 days are removed due to no value for lag168. (we will merge lag48 and lag168 datas)
test_wide168 <- test[ , -4:-5]
test_wide168 <- test_wide168[,2:4 ] %>% pivot_wider(names_from = Hour, values_from = frcst_lag168, names_prefix = "lag168_")
train_wide_cons <- train[,2:4 ] %>% pivot_wider(names_from = Hour, values_from = Consumption, names_prefix = "consumption_")
train_wide_cons <- train_wide_cons[-1:-7,]  # first 7 days are removed due to no value for lag168. (we will merge lag48 and lag168 datas)
test_wide_cons <- test[,2:4 ] %>% pivot_wider(names_from = Hour, values_from = Consumption, names_prefix = "consumption_")
train_wide48_168 <- cbind(train_wide48, train_wide168[,-1])
test_wide48_168 <- cbind(test_wide48, test_wide168[,-1])
matrix_train <- train_wide48_168[,-1]
matrix_train <- unnest(matrix_train)
matrix_train <- data.matrix(matrix_train)
matrix_test <- test_wide48_168[,-1]
matrix_test <- unnest(matrix_test)
matrix_test <- data.matrix(matrix_test)
matrix_train_cons <- train_wide_cons[,-1]
matrix_train_cons <- unnest(matrix_train_cons)
matrix_train_cons <- data.matrix(matrix_train_cons)
matrix_test_cons <- test_wide_cons[,-1]
matrix_test_cons <- unnest(matrix_test_cons)
matrix_test_cons <- data.matrix(matrix_test_cons)
lasso_mape <- 0 # give a zero value to prevent numeric error
print("Lasso Performance from 0 to 23:")
for (i in 0:23) {
test_hour <- filter(test, Hour==i)
model <- cv.glmnet(x=matrix_train, y=matrix_train_cons[,i+1])
predict_model<- predict(model, newx=matrix_test)
lasso_mape[i+1] <- mape(predict_model, test_hour$Consumption)
print(lasso_mape[i+1])
}
avg_lasso_mape <- mean(lasso_mape[1:24])
print("----------------------------")
print("Average Value of all hours")
print(mean(lasso_mape[1:24]))
boxplot(0.0776, 0.0365, 0.0426, Hourly_lrm_mape, lasso_mape, ylab="MAPE Comparision", xlab="Methods", names=c("Naive Lag48","Naive Lag168","Linear Reg","Hourly Reg","Penalized Reg"))
