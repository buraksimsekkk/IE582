knitr::opts_chunk$set(echo = TRUE)
all_data<- cbind(x_train,y_train[,-1],z_train[,-1])
all_data<- cbind(x_train,y_train[,-1],z_train[,-1])
knitr::opts_chunk$set(echo = TRUE)
#loading libraries
library(ggplot2)
library(dplyr)
library(tidyverse)
library(data.table)
library(scatterplot3d)
#reading dataframes
x_train=read.table("https://raw.githubusercontent.com/BU-IE-582/fall20-buraksimsekkk/master/HW2/uWaveGestureLibrary_X_TRAIN.txt")
y_train=read.table("https://raw.githubusercontent.com/BU-IE-582/fall20-buraksimsekkk/master/HW2/uWaveGestureLibrary_Y_TRAIN.txt")
z_train=read.table("https://raw.githubusercontent.com/BU-IE-582/fall20-buraksimsekkk/master/HW2/uWaveGestureLibrary_Z_TRAIN.txt")
class_ind = c()
for(i in 1:8)
{
class_ind[i]  <-which(x_train$V1==i)[1]
}
knitr::opts_chunk$set(echo = TRUE)
#loading libraries
library(ggplot2)
library(dplyr)
library(tidyverse)
library(data.table)
library(scatterplot3d)
#reading dataframes
x_train=read.table("https://raw.githubusercontent.com/BU-IE-582/fall20-buraksimsekkk/master/HW2/uWaveGestureLibrary_X_TRAIN.txt")
y_train=read.table("https://raw.githubusercontent.com/BU-IE-582/fall20-buraksimsekkk/master/HW2/uWaveGestureLibrary_Y_TRAIN.txt")
z_train=read.table("https://raw.githubusercontent.com/BU-IE-582/fall20-buraksimsekkk/master/HW2/uWaveGestureLibrary_Z_TRAIN.txt")
class_ind = c()
for(i in 1:8)
{
class_ind[i]  <-which(x_train$V1==i)[1]
}
i=1
gesture1 <- data.table(x=t(x_train[class_ind[i],2:316]),
y=t(y_train[class_ind[i],2:316]),
z=t(z_train[class_ind[i],2:316]))
vel_gesture1 <- cumsum(gesture1)
loc_gesture1 <- cumsum(vel_gesture1)
scatterplot3d(loc_gesture1$x.11,loc_gesture1$y.11,loc_gesture1$z.11,  main = "GESTURE 1",xlab = "X Location",ylab = "Y Location",zlab = "Z Location",col.axis="pink", col.grid="lightblue", color = "darkgreen", type = "p")
i=2
gesture2 <- data.table(x=t(x_train[class_ind[i],2:316]),
y=t(y_train[class_ind[i],2:316]),
z=t(z_train[class_ind[i],2:316]))
vel_gesture2 <- cumsum(gesture2)
loc_gesture2 <- cumsum(vel_gesture2)
scatterplot3d(loc_gesture2$x.15,loc_gesture2$y.15,loc_gesture2$z.15,  main = "GESTURE 2",xlab = "X Location",ylab = "Y Location",zlab = "Z Location",col.axis="pink", col.grid="lightblue", color = "darkgreen", type = "p")
i=3
gesture3 <- data.table(x=t(x_train[class_ind[i],2:316]),
y=t(y_train[class_ind[i],2:316]),
z=t(z_train[class_ind[i],2:316]))
vel_gesture3 <- cumsum(gesture3)
loc_gesture3 <- cumsum(vel_gesture3)
scatterplot3d(loc_gesture3$x.4,loc_gesture3$y.4,loc_gesture3$z.4,  main = "GESTURE 3",xlab = "X Location",ylab = "Y Location",zlab = "Z Location",col.axis="pink", col.grid="lightblue", color = "darkgreen", type = "p")
i=4
gesture4 <- data.table(x=t(x_train[class_ind[i],2:316]),
y=t(y_train[class_ind[i],2:316]),
z=t(z_train[class_ind[i],2:316]))
vel_gesture4 <- cumsum(gesture4)
loc_gesture4 <- cumsum(vel_gesture4)
scatterplot3d(loc_gesture4$x.5,loc_gesture4$y.5,loc_gesture4$z.5,  main = "GESTURE 4",xlab = "X Location",ylab = "Y Location",zlab = "Z Location",col.axis="pink", col.grid="lightblue", color = "darkgreen", type = "p")
i=5
gesture5 <- data.table(x=t(x_train[class_ind[i],2:316]),
y=t(y_train[class_ind[i],2:316]),
z=t(z_train[class_ind[i],2:316]))
vel_gesture5 <- cumsum(gesture5)
loc_gesture5 <- cumsum(vel_gesture5)
scatterplot3d(loc_gesture5$x.2,loc_gesture5$y.2,loc_gesture5$z.2,  main = "GESTURE 5",xlab = "X Location",ylab = "Y Location",zlab = "Z Location",col.axis="pink", col.grid="lightblue", color = "darkgreen", type = "p")
i=6
gesture6 <- data.table(x=t(x_train[class_ind[i],2:316]),
y=t(y_train[class_ind[i],2:316]),
z=t(z_train[class_ind[i],2:316]))
vel_gesture6 <- cumsum(gesture6)
loc_gesture6 <- cumsum(vel_gesture6)
scatterplot3d(loc_gesture6$x.1,loc_gesture6$y.1,loc_gesture6$z.1,  main = "GESTURE 6",xlab = "X Location",ylab = "Y Location",zlab = "Z Location",col.axis="pink", col.grid="lightblue", color = "darkgreen", type = "p")
i=7
gesture7 <- data.table(x=t(x_train[class_ind[i],2:316]),
y=t(y_train[class_ind[i],2:316]),
z=t(z_train[class_ind[i],2:316]))
vel_gesture7 <- cumsum(gesture7)
loc_gesture7 <- cumsum(vel_gesture7)
scatterplot3d(loc_gesture7$x.7,loc_gesture7$y.7,loc_gesture7$z.7,  main = "GESTURE 7",xlab = "X Location",ylab = "Y Location",zlab = "Z Location",col.axis="pink", col.grid="lightblue", color = "darkgreen", type = "p")
i=8
gesture8 <- data.table(x=t(x_train[class_ind[i],2:316]),
y=t(y_train[class_ind[i],2:316]),
z=t(z_train[class_ind[i],2:316]))
vel_gesture8 <- cumsum(gesture8)
loc_gesture8 <- cumsum(vel_gesture8)
scatterplot3d(loc_gesture8$x.6,loc_gesture8$y.6,loc_gesture8$z.6,  main = "GESTURE 8",xlab = "X Location",ylab = "Y Location",zlab = "Z Location",col.axis="pink", col.grid="lightblue", color = "darkgreen", type = "p")
class <- x_train[1]
colnames(class)[1] = "class"
x_acc <- x_train[-1]
x_velocity <- t(apply(x_acc, 1, cumsum))
x_location <- t(apply(x_velocity, 1, cumsum))
x_location <- cbind(x_location,class)
x_position <- as.data.table(x_location) %>% mutate(time_series_id = seq(nrow(x_location)))
x_long     <- x_position %>% melt(id.vars = c("class", "time_series_id"))
colnames(x_long)[3] = "time_index"
colnames(x_long)[4] = "X"
y_acc <- y_train[-1]
y_velocity <- t(apply(y_acc, 1, cumsum))
y_location <- t(apply(y_velocity, 1, cumsum))
y_location    <- cbind(y_location,class)
y_position <- as.data.table(y_location) %>% mutate(time_series_id = seq(nrow(y_location)))
y_long     <- melt(y_position, id.vars = c("class", "time_series_id"))
colnames(y_long)[3] = "time_index"
colnames(y_long)[4] = "Y"
z_acc <- z_train[-1]
z_velocity <- t(apply(z_acc, 1, cumsum))
z_location <- t(apply(z_velocity, 1, cumsum))
z_location <- cbind(z_location,class)
z_position <- as.data.table(z_location) %>% mutate(time_series_id = seq(nrow(z_location)))
z_long     <- melt(z_position, id.vars = c("class", "time_series_id"))
colnames(z_long)[3] = "time_index"
colnames(z_long)[4] = "Z"
xyz_long <- cbind(x_long, y_long[,4], z_long[,4] )
xyz_long <- arrange(xyz_long, time_series_id)
pca <- princomp(xyz_long[,4:6], cor=T)
summary(pca)
univariate <- xyz_long %>% mutate(value = predict(pca,xyz_long[,4:6])[,1]) %>%  select(-X, -Y, -Z)
example <- univariate %>% filter(time_series_id %in% c(38,82,94,95,96,184,199,371,378,481,515,642,713,779,820,845))
ggplot(example, aes(x= time_index, y= value , colour=time_series_id)) +
geom_line() + xlab("Time Index") + ylab("Value") + theme(plot.title=element_text(hjust = 0.5))
line_1  <- univariate %>% filter(time_series_id ==38  )
line_2  <- univariate %>% filter(time_series_id ==378 )
class_1 <- cbind(line_1 , line_2$value)
colnames(class_1)[4] = "line_1"
colnames(class_1)[5] = "line_2"
print(ggplot(class_1) + geom_point(aes(x=time_index, y=line_1)) + geom_point(aes(x=time_index, y=line_2), color = "red") + xlab("Time Index") + ylab("Value"))
line_3  <- univariate %>% filter(time_series_id ==82  )
line_4  <- univariate %>% filter(time_series_id ==481 )
class_2 <- cbind(line_3 , line_4$value)
colnames(class_2)[4] = "line_3"
colnames(class_2)[5] = "line_4"
print(ggplot(class_2) + geom_point(aes(x=time_index, y=line_3)) + geom_point(aes(x=time_index, y=line_4), color = "red") + xlab("Time Index") + ylab("Value"))
line_5  <- univariate %>% filter(time_series_id ==94  )
line_6  <- univariate %>% filter(time_series_id ==515 )
class_3 <- cbind(line_5 , line_6$value)
colnames(class_3)[4] = "line_5"
colnames(class_3)[5] = "line_6"
print(ggplot(class_3) + geom_point(aes(x=time_index, y=line_5)) + geom_point(aes(x=time_index, y=line_6), color = "red") + xlab("Time Index") + ylab("Value"))
line_7  <- univariate %>% filter(time_series_id ==95  )
line_8  <- univariate %>% filter(time_series_id ==642 )
class_4 <- cbind(line_7 , line_8$value)
colnames(class_4)[4] = "line_7"
colnames(class_4)[5] = "line_8"
print(ggplot(class_4) + geom_point(aes(x=time_index, y=line_7)) + geom_point(aes(x=time_index, y=line_8), color = "red") + xlab("Time Index") + ylab("Value"))
line_9  <- univariate %>% filter(time_series_id ==96  )
line_10 <- univariate %>% filter(time_series_id ==713 )
class_5 <- cbind(line_9 , line_10$value)
colnames(class_5)[4] = "line_9"
colnames(class_5)[5] = "line_10"
print(ggplot(class_5) + geom_point(aes(x=time_index, y=line_9)) + geom_point(aes(x=time_index, y=line_10), color = "red") + xlab("Time Index") + ylab("Value"))
line_11 <- univariate %>% filter(time_series_id ==184 )
line_12 <- univariate %>% filter(time_series_id ==779 )
class_6 <- cbind(line_11 , line_12$value)
colnames(class_6)[4] = "line_11"
colnames(class_6)[5] = "line_12"
print(ggplot(class_6) + geom_point(aes(x=time_index, y=line_11)) + geom_point(aes(x=time_index, y=line_12), color = "red") + xlab("Time Index") + ylab("Value"))
line_13 <- univariate %>% filter(time_series_id ==199 )
line_14 <- univariate %>% filter(time_series_id ==820 )
class_7 <- cbind(line_13 , line_14$value)
colnames(class_7)[4] = "line_13"
colnames(class_7)[5] = "line_14"
print(ggplot(class_7) + geom_point(aes(x=time_index, y=line_13)) + geom_point(aes(x=time_index, y=line_14), color = "red") + xlab("Time Index") + ylab("Value"))
line_15 <- univariate %>% filter(time_series_id ==371 )
line_16 <- univariate %>% filter(time_series_id ==845 )
class_8 <- cbind(line_15 , line_16$value)
colnames(class_8)[4] = "line_15"
colnames(class_8)[5] = "line_16"
print(ggplot(class_8) + geom_point(aes(x=time_index, y=line_15)) + geom_point(aes(x=time_index, y=line_16), color = "red") + xlab("Time Index") + ylab("Value"))
for (i in 1:8){
xyz_long_class <- xyz_long %>% filter(class==i)
pca_class <- prcomp(xyz_long_class[,4:6], scale=TRUE)
print("Summary for Class:"[i])
print(i)
print(summary(pca_class))
cat("\n")
cat("\n")}
all_data<- cbind(x_train,y_train[,-1],z_train[,-1])
all_data[,-1]=scale(all_data[,-1])
distance = as.matrix(dist(all_data[,-1], method = "euclidean"))
scale <- cmdscale(distance, k=2)
scale_data <- all_data %>% select(V1) %>% mutate(coord1=scale[,1], coord2=scale[,2], Classes = as_factor(V1))
ggplot(scale_data) + geom_point(aes(x=coord1, y=coord2, colour=Classes)) + xlab("Coordinate 1") + ylab("Coordinate 2") + theme(plot.title=element_text(hjust = 0.5)) + ggtitle("Visualizing the time series")
all_data<- cbind(x_train,y_train[,-1],z_train[,-1])
all_data[,-1]=scale(all_data[,-1])
distance = as.matrix(dist(all_data[,-1], method = "euclidean"))
scale <- cmdscale(distance, k=2)
scale_data <- all_data %>% select(V1) %>% mutate(coord1=scale[,1], coord2=scale[,2], Classes = as_factor(V1))
ggplot(scale_data) + geom_point(aes(x=coord1, y=coord2, colour=Classes)) + xlab("Coordinate 1") + ylab("Coordinate 2") + theme(plot.title=element_text(hjust = 0.5)) + ggtitle("Visualizing the time series")
knitr::opts_chunk$set(echo = TRUE)
#loading libraries
library(ggplot2)
library(dplyr)
library(tidyverse)
library(tidyr)
library(data.table)
library(scatterplot3d)
library(Metrics)
library(glmnet)
#reading dataframes
base_data = read.csv("https://raw.githubusercontent.com/BU-IE-582/fall20-buraksimsekkk/master/HW3/RealTimeConsumption-01012016-30112020.csv")
data <- base_data
data$Date        = as.Date(data$Date, "%d.%m.%Y")
data$Hour        = as.numeric(sub(":00","", data$Hour))
data$Consumption = as.numeric(sub(",","" , data$Consumption..MWh.))
data <- select(data,-Consumption..MWh.)
data <- data %>% mutate(index = c(1:nrow(data)),Date )
data <- data[,c(4,1,2,3)]
data <- data[-2233:-2256,]
data <- data[-2113:-2136,]
data <- data[-2065:-2088,]
str(data)
data <- data %>% mutate(frcst_lag48  = lag(data$Consumption, 48, na.pad = TRUE),
frcst_lag168 = lag(data$Consumption, 168, na.pad = TRUE))
test  <- data %>% tail(30*24)
plot_ref <- test %>% tail(48)
print("Real and Predicted Consumpiton between 29.11.2020 and 30.11.2020")
print(ggplot(plot_ref) + geom_line(aes(x=index, y=Consumption)) + geom_line(aes(x=index, y=frcst_lag48), color = "red")  + xlab("Time 29.11.2020-30.11.2020") + ylab("Consumption"))
frcst_lag48_mape  <- mape(test$frcst_lag48, test$Consumption)
frcst_lag168_mape <- mape(test$frcst_lag168, test$Consumption)
train <- data %>% head(-30*24)
lrm <- lm(Consumption ~ frcst_lag48 + frcst_lag168, train)
summary(lrm)
lrm_prediction <- predict(lrm, newdata = test)
lrm_mape <- mape(lrm_prediction, test$Consumption)
print(lrm_mape)
Hourly_lrm_mape <- 0 # give a zero value to prevent numeric error
print("Hourly Linear Regression Model Performance from 0 to 23:")
for (i in 0:23) {
filtered_model <- filter(train, Hour==i)
test_model     <- filter(test, Hour==i)
Hourly_lrm     <- lm(Consumption ~ frcst_lag48 + frcst_lag168, filtered_model)
Hourly_lrm_prediction <- predict(Hourly_lrm, newdata = test_model)
Hourly_lrm_mape[i+1]    <- mape(Hourly_lrm_prediction, test_model$Consumption)
#print("Model For Hour:" )
#print(i)
#print(summary(Hourly_lrm)) This line is commented since it is long text. However, it can be used if summary of all models are interested.
print(Hourly_lrm_mape[i+1])
}
print("Average Hourly Linear Regression Model MAPE:")
avg_Hourly_lrm_mape <- mean(Hourly_lrm_mape[1:24])
print(avg_Hourly_lrm_mape)
train_wide48 <- train[ , -4]
train_wide48 <- train_wide48[,2:4 ] %>% pivot_wider(names_from = Hour, values_from = frcst_lag48, names_prefix = "lag48_")
train_wide48 <- train_wide48[-1:-7,]  # first 7 days are removed due to no value for lag168. (we will merge lag48 and lag168 datas)
test_wide48 <- test[ , -4]
test_wide48 <- test_wide48[,2:4 ] %>% pivot_wider(names_from = Hour, values_from = frcst_lag48, names_prefix = "lag48_")
train_wide168 <- train[ , -4:-5]
train_wide168 <- train_wide168[,2:4 ] %>% pivot_wider(names_from = Hour, values_from = frcst_lag168, names_prefix = "lag168_")
train_wide168 <- train_wide168[-1:-7,]   # first 7 days are removed due to no value for lag168. (we will merge lag48 and lag168 datas)
test_wide168 <- test[ , -4:-5]
test_wide168 <- test_wide168[,2:4 ] %>% pivot_wider(names_from = Hour, values_from = frcst_lag168, names_prefix = "lag168_")
train_wide_cons <- train[,2:4 ] %>% pivot_wider(names_from = Hour, values_from = Consumption, names_prefix = "consumption_")
train_wide_cons <- train_wide_cons[-1:-7,]  # first 7 days are removed due to no value for lag168. (we will merge lag48 and lag168 datas)
test_wide_cons <- test[,2:4 ] %>% pivot_wider(names_from = Hour, values_from = Consumption, names_prefix = "consumption_")
train_wide48_168 <- cbind(train_wide48, train_wide168[,-1])
test_wide48_168 <- cbind(test_wide48, test_wide168[,-1])
matrix_train <- train_wide48_168[,-1]
matrix_train <- unnest(matrix_train)
matrix_train <- data.matrix(matrix_train)
matrix_test <- test_wide48_168[,-1]
matrix_test <- unnest(matrix_test)
matrix_test <- data.matrix(matrix_test)
matrix_train_cons <- train_wide_cons[,-1]
matrix_train_cons <- unnest(matrix_train_cons)
matrix_train_cons <- data.matrix(matrix_train_cons)
matrix_test_cons <- test_wide_cons[,-1]
matrix_test_cons <- unnest(matrix_test_cons)
matrix_test_cons <- data.matrix(matrix_test_cons)
lasso_mape <- 0 # give a zero value to prevent numeric error
print("Lasso Performance from 0 to 23:")
for (i in 0:23) {
test_hour <- filter(test, Hour==i)
model <- cv.glmnet(x=matrix_train, y=matrix_train_cons[,i+1])
predict_model<- predict(model, newx=matrix_test)
lasso_mape[i+1] <- mape(predict_model, test_hour$Consumption)
print(lasso_mape[i+1])
}
avg_lasso_mape <- mean(lasso_mape[1:24])
print("Average Value of all hours")
print(mean(lasso_mape[1:24]))
boxplot(0.0776, 0.0365, 0.0438, Hourly_lrm_mape, lasso_mape, ylab="MAPE Comparision", xlab="Methods", names=c("Lag48","Lag168","LinearReg","HourlyReg","PenalizedReg"))
